{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab692
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f0\i\fs28 \cf0 Basic overview of code structure.
\f1\i0\fs24 \cf2 \cb3 \
\pard\tx692\pardeftab692\pardirnatural\qc\partightenfactor0
\cf2 \
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf2 \
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf2 I have tried to keep flow simple enough.\
\
Looking at the code we can understand the flow of design pattern's. \
MVC and MVVM can be understood by going through.\
\
There are some helper/utility classes in order to simplify the ease of use:\
\pard\tx220\tx720\pardeftab692\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8226 	}Constants.swift used in terms to store some project level constants.\
{\listtext	\uc0\u8226 	}Utility.swift is actually containing some extra global feature's for String, Attributed String and UIView.\
\pard\tx560\pardeftab692\pardirnatural\partightenfactor0
\cf2 \
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0
\cf2 The JSON parsing is done by using Codable swift feature.\
APICallerModel is responsible for loading the products (API call related operations)\
RMImageManager is responsible for making API calls to load an image and try to cache as needed.\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \
\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f2\fs28 \cf2 The project contains two screens:\
\pard\tx220\tx720\pardeftab692\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf2 {\listtext	\uc0\u8226 	}The first view is regarding the list of products available, displayed with basic minimal information in grid layout. This can be see in ProductsViewController.swift file.\
{\listtext	\uc0\u8226 	}The second view is displaying the details of particular product user has tapped on. This is using mostly MVVM pattern on UITableView contained within ProductDetailsViewController.swift file.\
\pard\tx940\tx1440\pardeftab692\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf2 {\listtext	
\f3 \uc0\u8259 
\f2 	}RMProfileDescriptionModel is used to handle the data for product details (can be visualised as ViewModel)\
\pard\tx220\tx720\pardeftab692\li720\fi-720\pardirnatural\partightenfactor0
\cf2 	\
Few animations are implemented in order to just enhance the User experience.}